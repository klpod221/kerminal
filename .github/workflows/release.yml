name: Release Kerminal App

on:
  push:
    tags:
      - 'v*'

jobs:
  build-tauri:
    permissions:
      contents: write
    name: Build
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm-based Macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel-based Macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-latest'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 40
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          # Specify additional targets for macOS universal binaries
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          shared-key: ${{ matrix.platform }}-${{ matrix.args }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install dependencies (windows only)
        if: matrix.platform == 'windows-latest'
        run: cargo install --force trusted-signing-cli

      - name: Install frontend dependencies
        run: npm install

      - name: Build and release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__
          releaseName: 'Kerminal v__VERSION__'
          releaseBody: 'New release of Kerminal App'
          releaseDraft: false
          prerelease: false

  build-android:
    permissions:
      contents: write
    name: Build Android APK
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android NDK
        run: |
          sdkmanager "ndk;26.1.10909125"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/26.1.10909125" >> $GITHUB_ENV

      - name: Install Rust Android targets
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add x86_64-linux-android
          rustup target add i686-linux-android

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          shared-key: 'android'

      - name: Install frontend dependencies
        run: npm install

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Decode and setup keystore
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > $HOME/kerminal-release.keystore
          echo "KEYSTORE_PATH=$HOME/kerminal-release.keystore" >> $GITHUB_ENV

      - name: Create signing config
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        run: |
          cat > src-tauri/gen/android/key.properties << EOF
          storePassword=$ANDROID_KEYSTORE_PASSWORD
          keyPassword=$ANDROID_KEY_PASSWORD
          keyAlias=$ANDROID_KEY_ALIAS
          storeFile=$HOME/kerminal-release.keystore
          EOF

      - name: Update build.gradle for signing
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          cat > src-tauri/gen/android/app/signing.gradle.kts << 'EOF'
          import java.util.Properties
          
          val keystorePropertiesFile = rootProject.file("key.properties")
          val keystoreProperties = Properties()
          
          if (keystorePropertiesFile.exists()) {
              keystoreProperties.load(keystorePropertiesFile.inputStream())
              
              android {
                  signingConfigs {
                      create("release") {
                          keyAlias = keystoreProperties["keyAlias"] as String
                          keyPassword = keystoreProperties["keyPassword"] as String
                          storeFile = file(keystoreProperties["storeFile"] as String)
                          storePassword = keystoreProperties["storePassword"] as String
                      }
                  }
                  buildTypes {
                      getByName("release") {
                          signingConfig = signingConfigs.getByName("release")
                      }
                  }
              }
          }
          EOF
          
          echo "" >> src-tauri/gen/android/app/build.gradle.kts
          echo "apply(from = \"signing.gradle.kts\")" >> src-tauri/gen/android/app/build.gradle.kts

      - name: Build APK (Debug)
        run: npm run tauri android build -- --apk

      - name: Build APK (Release)
        run: npm run tauri android build -- --release --apk

      - name: Rename APK files
        run: |
          VERSION=${{ github.ref_name }}
          CLEAN_VERSION=${VERSION#v}
          
          mkdir -p release-apks
          
          # Copy and rename debug APK
          if [ -f src-tauri/gen/android/app/build/outputs/apk/universal/debug/app-universal-debug.apk ]; then
            cp src-tauri/gen/android/app/build/outputs/apk/universal/debug/app-universal-debug.apk \
               release-apks/kerminal-${CLEAN_VERSION}-debug.apk
          fi
          
          # Copy and rename release APK
          if [ -f src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk ]; then
            cp src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk \
               release-apks/kerminal-${CLEAN_VERSION}-release.apk
          elif [ -f src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-unsigned.apk ]; then
            cp src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-unsigned.apk \
               release-apks/kerminal-${CLEAN_VERSION}-release-unsigned.apk
          fi

      - name: Upload APK to Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-apks/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-aur:
    name: Publish to AUR (${{ matrix.repo }})
    needs: build-tauri
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    strategy:
      fail-fast: false
      matrix:
        repo: ['kerminal', 'kerminal-bin']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies and Create User
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm git openssh base-devel pacman-contrib sudo
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > ~/.ssh/aur
          chmod 600 ~/.ssh/aur
          git config --global core.sshCommand "ssh -i ~/.ssh/aur -o StrictHostKeyChecking=no"

      - name: Configure Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Clone AUR Repository
        run: git clone ssh://aur@aur.archlinux.org/${{ matrix.repo }}.git /tmp/aur-repo

      - name: Change Repo Ownership
        run: chown -R builder:builder /tmp/aur-repo

      - name: Update PKGBUILD as non-root user
        run: |
          sudo -u builder bash -c '
            cd /tmp/aur-repo
            VERSION=${{ github.ref_name }}
            CLEAN_VERSION=${VERSION#v}
            sed -i "s/^pkgver=.*/pkgver=$CLEAN_VERSION/" PKGBUILD
            updpkgsums
          '

      - name: Update .SRCINFO as non-root user
        run: |
          sudo -u builder bash -c '
            cd /tmp/aur-repo
            makepkg --printsrcinfo > .SRCINFO
          '

      - name: Commit and Push to AUR
        run: |
          cd /tmp/aur-repo
          git config --global --add safe.directory /tmp/aur-repo
          if ! git diff-index --quiet HEAD; then
            git add PKGBUILD .SRCINFO
            git commit -m "Update to version ${{ github.ref_name }}"
            git push
          else
            echo "No changes to commit."
          fi
